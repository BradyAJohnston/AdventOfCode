---
title: Advent of Code 2024
subtitle: This time with Julia
author: Brady Johnston
engine: julia
---

## [Day 1](https://adventofcode.com/2024/day/1)
```{julia}
# Read the file into an array of lines
lines = readlines("data/day_1.txt")
split_lines = [parse.(Int, split(line)) for line in lines]

col1 = [x[1] for x in split_lines]
col2 = [x[2] for x in split_lines]

sort!(col1)
sort!(col2)

total = 0
for i in 1:length(col1)
    total += abs(col1[i] - col2[i])
end

print("Total distance of all coordinates: " * string(total))
```

## [Day 2](https://adventofcode.com/2024/day/2)


```{julia}

function check_report_safe(report::Vector{Int})
    change = diff(report)
    is_size_safe = Base.between.(abs.(change), 1, 3)
    is_dir_safe = diff(sign.(change)) .== 0
    return all(is_dir_safe) & all(is_size_safe)
end

examples = [
    [7, 6, 4, 2, 1], 
    [1, 2, 7, 8, 9], 
    [9, 7, 6, 2, 1], 
    [1, 3, 2, 4, 5], 
    [8, 6, 4, 4, 1], 
    [1, 3, 6, 7, 9]
]

answers = [true, false, false, false, false, true]


@assert check_report_safe.(examples) == answers


lines = readlines("data/day_2.txt")
split_lines = [parse.(Int, split(line)) for line in lines]

is_report_safe = check_report_safe.(split_lines)
n_safe = sum(is_report_safe)

print("Total safe reports: $n_safe")


```

## [Day 3](https://adventofcode.com/2024/day/3)

```{julia}

example = "xmul(2,4)%&mul[3,7]!@^do_not_mul(5,5)+mul(32,64]then(mul(11,8)mul(8,5))"
example_numbers = [8, 25, 88, 40]


function mulstring_to_int(mulstring)
    return prod([parse(Int, x.match) for x in eachmatch(r"\d+", mulstring)])
end

function extract_mulstrings(line)
    return [m.match for m in eachmatch(r"mul\(\d+,\d+\)", line)]
end

@assert mulstring_to_int("mul(10,3)") == 30
@assert mulstring_to_int("mul(11,5)") == 55

extract_mulstrings(example)

example_parsed = mulstring_to_int.(extract_mulstrings(example))
example_parsed
@assert example_parsed == example_numbers
@assert sum(example_parsed) == sum(example_numbers)


lines = readlines("2024/data/day_3.txt")
extracted_values = [mulstring_to_int.(x) for x in extract_mulstrings.(lines)]

total = sum(sum.(extracted_values))

print("Total sum of all mul calls: $total")

```
