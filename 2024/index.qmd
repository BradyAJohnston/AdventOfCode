---
title: Advent of Code 2024
subtitle: This time with Julia
author: Brady Johnston
engine: julia
---

## [Day 1](https://adventofcode.com/2024/day/1)
```{julia}
# Read the file into an array of lines
lines = readlines("data/day_1.txt")
split_lines = [parse.(Int, split(line)) for line in lines]

col1 = [x[1] for x in split_lines]
col2 = [x[2] for x in split_lines]

sort!(col1)
sort!(col2)

total = 0
for i in 1:length(col1)
    total += abs(col1[i] - col2[i])
end

print("Total distance of all coordinates: " * string(total))
```


## [Day 2](https://adventofcode.com/2024/day/2)


```{julia}

function check_report_safe(report::Vector{Int})
    change = diff(report)
    is_size_safe = Base.between.(abs.(change), 1, 3)
    is_dir_safe = diff(sign.(change)) .== 0
    return all(is_dir_safe) & all(is_size_safe)
end

examples = [
    [7, 6, 4, 2, 1], 
    [1, 2, 7, 8, 9], 
    [9, 7, 6, 2, 1], 
    [1, 3, 2, 4, 5], 
    [8, 6, 4, 4, 1], 
    [1, 3, 6, 7, 9]
]

answers = [true, false, false, false, false, true]


@assert check_report_safe.(examples) == answers


lines = readlines("data/day_2.txt")
split_lines = [parse.(Int, split(line)) for line in lines]

is_report_safe = check_report_safe.(split_lines)
n_safe = sum(is_report_safe)

print("Total safe reports: $n_safe")


```

## [Day 3](https://adventofcode.com/2024/day/3)

Having spent a bunch of time learning regex a couple of years ago continues to always payoff, being able to just pattern match without having to look up what to use is always great.

### Part 1
```{julia}

example = "xmul(2,4)%&mul[3,7]!@^do_not_mul(5,5)+mul(32,64]then(mul(11,8)mul(8,5))"
example_numbers = [8, 25, 88, 40]


function mulstring_to_int(mulstring)
    return prod([parse(Int, x.match) for x in eachmatch(r"\d+", mulstring)])
end

function extract_mulstrings(line)
    return [m.match for m in eachmatch(r"mul\(\d+,\d+\)", line)]
end

@assert mulstring_to_int("mul(11,8)") == 88
@assert mulstring_to_int("mul(8,5)") == 40

example_parsed = mulstring_to_int.(extract_mulstrings(example))
@assert example_parsed == example_numbers


lines = readlines("data/day_3.txt")
extracted_values = [mulstring_to_int.(x) for x in extract_mulstrings.(lines)]

total = sum(sum.(extracted_values))

print("Total sum of all mul calls: $total")

```

### Part 2

This uses global values, which I'm not a fan of, but I couldn't be bothered remaking it to work better with the global context

```{julia}
example = "xmul(2,4)&mul[3,7]!^don't()_mul(5,5)+mul(32,64](mul(11,8)undo()?mul(8,5))"
example_numbers = [8, 40]

global is_enabled = true

function extract_conditional_mulstrings(string)
    global is_enabled
    matches = [m.match for m in eachmatch(r"(mul\(\d+,\d+\)|don't\(\)|do\(\))", string)]
    enabled_matches = String[]
    for match in matches
        if match == "don't()"
            is_enabled = false
            continue
        end
        if match == "do()"
            is_enabled = true
            continue
        end
        if !is_enabled
            continue
        end
        push!(enabled_matches, match)
    end
    enabled_matches
end

@assert mulstring_to_int.(extract_conditional_mulstrings(example)) == example_numbers

lines = readlines("data/day_3.txt")
extracted_values = [mulstring_to_int.(x) for x in extract_conditional_mulstrings.(lines)]

total = sum(sum.(extracted_values))

print("Total sum of all mul calls: $total")

```

## [Day 4](https://adventofcode.com/2024/day/4)


### Part 1

Gosh this one got really messy really quickly. Had to use copilot to help me write the diagnoal finder, not enough coffee to figure that out out myself.

Probably a bad approach to it, but it works!

```{julia}
example = "MMMSXXMASM
MSAMXMSMSA
AMXSXMAAMM
MSAMASMSMX
XMASAMXAMM
XXAMMXXAMA
SMSMSASXSS
SAXAMASAAA
MAMMMXMMMM
MXMXAXMASX"

example_matched = "....XXMAS.
.SAMXMS...
...S..A...
..A.A.MS.X
XMASAMX.MM
X.....XA.A
S.S.S.S.SS
.A.A.A.A.A
..M.M.M.MM
.X.X.XMASX"

patterns = ["XMAS", "SAMX"]

example = read("data/day_4.txt", String)

function str_as_matrix(str)
    lines = split(str)
    n_rows = length(lines)
    n_cols = length(lines[1])
    mat = fill('.', n_rows, n_cols)
    for (i, line) in enumerate(lines)
        mat[i, :] = collect(line)
    end
    mat
end


mat_chr = str_as_matrix(example)

n_rows, n_cols = size(mat_chr)

mat_matched = fill(false, n_rows, n_cols)


function match_to_mask(match::RegexMatch{String})
    start_idx = match.offset
    end_idx = start_idx + length(match.match) - 1
    empty = fill(false, length(match.match.string))
    empty[start_idx:end_idx] .= true
    empty
end

counter = 0


global indexes = reshape(1:(n_cols*n_rows), n_rows, n_cols)
for pattern in [r"XMAS", r"SAMX"]

    for i in 1:n_rows
        matches = collect(eachmatch(pattern, join(mat_chr[i, :]), overlap=true))
        if length(matches) == 0
            continue
        end
        for m in matches
            mat_matched[i, :] = mat_matched[i, :] .| match_to_mask(m)
            counter += 1
        end
    end

    for j in 1:n_cols
        matches = collect(eachmatch(pattern, join(mat_chr[:, j]), overlap=true))
        if length(matches) == 0
            continue
        end
        for m in matches
            mat_matched[:, j] = mat_matched[:, j] .| match_to_mask(m)
            counter += 1

        end
    end



    function get_diagonals(matrix)
        global indexes
        n, m = size(matrix)
        diagonals = Vector[]

        # Get diagonals from top-left to bottom-right
        for k in 1:(n + m - 1)
            diag = Int[]
            for i in 1:n
                j = k - i + 1
                if j >= 1 && j <= m
                    push!(diag, indexes[i, j])
                end
            end
            if !isempty(diag) && length(diag) >= 4
                push!(diagonals, diag)
            end
        end

        # Get diagonals from top-right to bottom-left
        for k in 1:(n + m - 1)
            diag = Int[]
            for i in 1:n
                j = i + k - n
                if j >= 1 && j <= m
                    push!(diag, indexes[i, j])
                end
            end
            if !isempty(diag) && length(diag) >= 4
                push!(diagonals, diag)
            end
        end

        return diagonals
    end




    diagonals = get_diagonals(mat_chr)

    for diag in diagonals
        str = join(mat_chr[diag])
        matches = collect(eachmatch(pattern, str))
        if length(matches) == 0
            continue
        end
        for match in matches
            mask = match_to_mask(match)
            idx = diag[mask]
            mat_matched[idx] .= true
            counter += 1
        end
    end
end

mat_matched
mat_chr_matched = fill('.', n_rows, n_cols)
mat_chr_matched[mat_matched] .= mat_chr[mat_matched]
println("Matches found: $counter")
```

### Part 2

Oh gosh this is going to get a lot worse.

```{julia}
function is_xmas_block(vector)
    m1 = collect("MAS")
    m2 = collect("SAM")
    diag1 = vector[[1, 5, 9]]
    diag2 = vector[[3, 5, 7]]
    ((diag1 == m1) | (diag1 == m2)) & ((diag2 == m1) | (diag2 == m2))
end

counter = 0

for row in 1:(n_rows - 2)
    rows = (1:3) .+ row .- 1
    for col in 1:(n_cols - 2)
        cols = (1:3) .+ col .- 1
        if is_xmas_block(mat_chr[rows, cols])
            counter += 1
        end
    end
end

counter

```

Actually this was way easier, how very pleasant.